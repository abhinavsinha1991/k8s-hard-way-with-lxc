    1  lxc list
    2  lxc delete controller-0
    3  lxc stop controller-0
    4  lxc list
    5  cd cka
    6  cd kubernetes/lxd-provisioning/
    7  vi k8s-profile-config 
    8  lxc
    9  lxc list
   10  sudo lxd init
   11  lxd profile list
   12  lxd profile show
   13  lxx profile show
   14  lxc profile list
   15  lxc profile copy default k8s
   16  mkdir cka
   17  cd cka
   18  git clone https://github.com/justmeandopensource/kubernetes
   19  cd kubernetes/lxd-provisioning/
   20  ll
   21  vi k8s-profile-config 
   22  lxc profile edit k8s
   23  lxc profile show k8s
   24  lxc list
   25  cd
   26  lxc launch images:centos/7 haproxy
   27  lxc launch ubuntu:18.04 controller-0 --profile k8s
   28  lxc list
   29  lxc launch ubuntu:16.04 controller-0 --profile k8s
   30  lxc launch ubuntu:18.04 controller-0 --profile k8s
   31  lxc image list
   32  lxc image delete 1b1c937f9de9
   33  lxc image list
   34  lxc image delete 0041760acce6
   35  lxc image list
   36  lxc launch ubuntu:16.04 controller-0 --profile k8s
   37  lxc launch ubuntu:20.04 controller-0 --profile k8s
   38  lxc launch ubuntu:20.04 controller-0
   39  lxc delete controller-0
   40  lxc delete controller-0 --force
   41  lxc profile edit k8s
   42  lxc pool
   43  lxc config
   44  lxc launch ubuntu:20.04 controller-0
   45  lxc delete controller-0
   46  lxc delete controller-0 --force
   47  lxc list
   48  lxc start ubuntu 18.04 abc
   49  lxc start ubuntu:18.04 abc
   50  lxc launch ubuntu:18.04 abc
   51  lxc list
   52  lxc stop abc
   53  lxc delete abc
   54  lxc launch ubuntu:18.04 abc --profile k8s
   55  lxc profile show k8s
   56  lxc version
   57  lxd version
   58  lxc profile edit k8s
   59  lxc launch ubuntu:18.04 abc --profile k8s
   60  lxc profile edit k8s
   61  lxc launch ubuntu:18.04 abc --profile k8s
   62  lxc profile edit k8s
   63  lxc launch ubuntu:18.04 abc --profile k8s
   64  lxc profile edit k8s
   65  lxc launch ubuntu:18.04 abc --profile k8s
   66  lxc profile edit k8s
   67  lxc list
   68  lxc stop abc
   69  lxc delete abc
   70  reboot
   71  sudo reboot
   72  lxc list
   73  { KUBERNETES_PUBLIC_ADDRESS=10.20.33.131;  KUBERNETES_HOSTNAMES=kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local; 
   74  cat > kubernetes-csr.json <<EOF
   75  {
   76    "CN": "kubernetes",
   77    "key": {
   78      "algo": "rsa",
   79      "size": 2048
   80    },
   81    "names": [
   82      {
   83        "C": "US",
   84        "L": "Portland",
   85        "O": "Kubernetes",
   86        "OU": "Kubernetes The Hard Way",
   87        "ST": "Oregon"
   88      }
   89    ]
   90  }
   91  EOF
   92    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -hostname=10.20.33.109,10.20.33.240,10.20.33.129,${KUBERNETES_PUBLIC_ADDRESS},127.0.0.1,${KUBERNETES_HOSTNAMES}   -profile=kubernetes   kubernetes-csr.json | cfssljson -bare kubernetes; 
   93  lxc list
   94  lxc delete controller-0
   95  lxc profile show k8s
   96  lxc launch ubuntu:18.04 controller-0 --profile k8s
   97  lxc launch ubuntu:18.04 controller-1 --profile k8s
   98  lxc launch ubuntu:18.04 controller-2 --profile k8s
   99  lxc launch ubuntu:18.04 worker-2 --profile k8s
  100  lxc launch ubuntu:18.04 worker-1 --profile k8s
  101  lxc launch ubuntu:18.04 worker-0 --profile k8s
  102  lxc list
  103  ps -ef
  104  ps -ef |grep lxc
  105  lxc list
  106  lxc exec haproxy bash
  107  history
  108  wget -q --show-progress --https-only --timestamping   https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssl   https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssljson
  109  ll
  110  chmod +x cfssl cfssljson
  111  sudo mv cfssl cfssljson /usr/local/bin/
  112  cfssl version
  113  cfssljson --version
  114  wget https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl
  115  chmod +x kubectl
  116  sudo mv kubectl /usr/local/bin/
  117  kubectl version --client
  118  ll
  119  cd cka
  120  ll
  121  cd kubernetes/
  122  ll
  123  cd
  124  ll
  125  cd cka
  126  ll
  127  vi kubernetes/
  128  cd ..
  129  ll
  130  cd cka
  131  ll
  132  mkdir gen_certs
  133  cd gen_certs/
  134  ll
  135  {
  136  cat > ca-config.json <<EOF
  137  {
  138    "signing": {
  139      "default": {
  140        "expiry": "8760h"
  141      },
  142      "profiles": {
  143        "kubernetes": {
  144          "usages": ["signing", "key encipherment", "server auth", "client auth"],
  145          "expiry": "8760h"
  146        }
  147      }
  148    }
  149  }
  150  EOF
  151   
  152  cat > ca-csr.json <<EOF
  153  {
  154    "CN": "Kubernetes",
  155    "key": {
  156      "algo": "rsa",
  157      "size": 2048
  158    },
  159    "names": [
  160      {
  161        "C": "US",
  162        "L": "Portland",
  163        "O": "Kubernetes",
  164        "OU": "CA",
  165        "ST": "Oregon"
  166      }
  167    ]
  168  }
  169  EOF
  170    cfssl gencert -initca ca-csr.json | cfssljson -bare ca;  }
  171  ll
  172  {
  173  cat > admin-csr.json <<EOF
  174  {
  175    "CN": "admin",
  176    "key": {
  177      "algo": "rsa",
  178      "size": 2048
  179    },
  180    "names": [
  181      {
  182        "C": "US",
  183        "L": "Portland",
  184        "O": "system:masters",
  185        "OU": "Kubernetes The Hard Way",
  186        "ST": "Oregon"
  187      }
  188    ]
  189  }
  190  EOF
  191    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -profile=kubernetes   admin-csr.json | cfssljson -bare admin;  }
  192  ll
  193  lxc info $instance |grep eth0 | head -1 | awk'{print $3}'
  194  lxc info $instance |grep eth0 | head -1 | awk '{print $3}'
  195  lxc info worker-0 |grep eth0 | head -1 | awk '{print $3}'
  196  for instance in worker-0 worker-1 worker-2; do
  197  cat > ${instance}-csr.json <<EOF
  198  {
  199    "CN": "system:node:${instance}",
  200    "key": {
  201      "algo": "rsa",
  202      "size": 2048
  203    },
  204    "names": [
  205      {
  206        "C": "US",
  207        "L": "Portland",
  208        "O": "system:nodes",
  209        "OU": "Kubernetes The Hard Way",
  210        "ST": "Oregon"
  211      }
  212    ]
  213  }
  214  EOF
  215    EXTERNAL_IP=$(lxc info $instance |grep eth0 | head -1 | awk '{print $3}')')
  216  cfssl gencert \
  217    -ca=ca.pem \
  218    -ca-key=ca-key.pem \
  219    -config=ca-config.json \
  220    -hostname=${instance},${EXTERNAL_IP} \
  221    -profile=kubernetes \
  222    ${instance}-csr.json | cfssljson -bare ${instance}
  223  done
  224  }
  225  for instance in worker-0 worker-1 worker-2; do
  226  cat > ${instance}-csr.json <<EOF
  227  {
  228    "CN": "system:node:${instance}",
  229    "key": {
  230      "algo": "rsa",
  231      "size": 2048
  232    },
  233    "names": [
  234      {
  235        "C": "US",
  236        "L": "Portland",
  237        "O": "system:nodes",
  238        "OU": "Kubernetes The Hard Way",
  239        "ST": "Oregon"
  240      }
  241    ]
  242  }
  243  EOF
  244    EXTERNAL_IP=$(lxc info ${instance} |grep eth0 | head -1 | awk '{print $3}')')
  245  cfssl gencert \
  246    -ca=ca.pem \
  247    -ca-key=ca-key.pem \
  248    -config=ca-config.json \
  249    -hostname=${instance},${EXTERNAL_IP} \
  250    -profile=kubernetes \
  251    ${instance}-csr.json | cfssljson -bare ${instance}
  252  done
  253  for instance in worker-0 worker-1 worker-2; do
  254  cat > ${instance}-csr.json <<EOF
  255  {
  256    "CN": "system:node:${instance}",
  257    "key": {
  258      "algo": "rsa",
  259      "size": 2048
  260    },
  261    "names": [
  262      {
  263        "C": "US",
  264        "L": "Portland",
  265        "O": "system:nodes",
  266        "OU": "Kubernetes The Hard Way",
  267        "ST": "Oregon"
  268      }
  269    ]
  270  }
  271  EOF
  272    EXTERNAL_IP=$(lxc info ${instance} |grep eth0 | head -1 | awk '{print $3}'))
  273  cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -hostname=${instance},${EXTERNAL_IP}   -profile=kubernetes   ${instance}-csr.json | cfssljson -bare ${instance}
  274  for instance in worker-0 worker-1 worker-2; do
  275  cat > ${instance}-csr.json <<EOF
  276  {
  277    "CN": "system:node:${instance}",
  278    "key": {
  279      "algo": "rsa",
  280      "size": 2048
  281    },
  282    "names": [
  283      {
  284        "C": "US",
  285        "L": "Portland",
  286        "O": "system:nodes",
  287        "OU": "Kubernetes The Hard Way",
  288        "ST": "Oregon"
  289      }
  290    ]
  291  }
  292  EOF
  293    EXTERNAL_IP=$(lxc info ${instance} |grep eth0 | head -1 | awk '{print $3}');  cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -hostname=${instance},${EXTERNAL_IP}   -profile=kubernetes   ${instance}-csr.json | cfssljson -bare ${instance}; done
  294  ll
  295  {
  296  cat > ca-config.json <<EOF
  297  {
  298    "signing": {
  299      "default": {
  300        "expiry": "8760h"
  301      },
  302      "profiles": {
  303        "kubernetes": {
  304          "usages": ["signing", "key encipherment", "server auth", "client auth"],
  305          "expiry": "8760h"
  306        }
  307      }
  308    }
  309  }
  310  EOF
  311   
  312  cat > ca-csr.json <<EOF
  313  {
  314    "CN": "Kubernetes",
  315    "key": {
  316      "algo": "rsa",
  317      "size": 2048
  318    },
  319    "names": [
  320      {
  321        "C": "US",
  322        "L": "Portland",
  323        "O": "Kubernetes",
  324        "OU": "CA",
  325        "ST": "Oregon"
  326      }
  327    ]
  328  }
  329  EOF
  330    cfssl gencert -initca ca-csr.json | cfssljson -bare ca; 
  331  ll
  332  {
  333  cat > kube-controller-manager-csr.json <<EOF
  334  {
  335    "CN": "system:kube-controller-manager",
  336    "key": {
  337      "algo": "rsa",
  338      "size": 2048
  339    },
  340    "names": [
  341      {
  342        "C": "US",
  343        "L": "Portland",
  344        "O": "system:kube-controller-manager",
  345        "OU": "Kubernetes The Hard Way",
  346        "ST": "Oregon"
  347      }
  348    ]
  349  }
  350  EOF
  351    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -profile=kubernetes   kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager;  }
  352  ll
  353  {
  354  cat > kube-proxy-csr.json <<EOF
  355  {
  356    "CN": "system:kube-proxy",
  357    "key": {
  358      "algo": "rsa",
  359      "size": 2048
  360    },
  361    "names": [
  362      {
  363        "C": "US",
  364        "L": "Portland",
  365        "O": "system:node-proxier",
  366        "OU": "Kubernetes The Hard Way",
  367        "ST": "Oregon"
  368      }
  369    ]
  370  }
  371  EOF
  372    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -profile=kubernetes   kube-proxy-csr.json | cfssljson -bare kube-proxy;  }
  373  ll
  374  {
  375  cat > kube-scheduler-csr.json <<EOF
  376  {
  377    "CN": "system:kube-scheduler",
  378    "key": {
  379      "algo": "rsa",
  380      "size": 2048
  381    },
  382    "names": [
  383      {
  384        "C": "US",
  385        "L": "Portland",
  386        "O": "system:kube-scheduler",
  387        "OU": "Kubernetes The Hard Way",
  388        "ST": "Oregon"
  389      }
  390    ]
  391  }
  392  EOF
  393    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -profile=kubernetes   kube-scheduler-csr.json | cfssljson -bare kube-scheduler;  }
  394  ll
  395  { KUBERNETES_PUBLIC_ADDRESS=10.20.33.131;  KUBERNETES_HOSTNAMES=kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local; 
  396  cat > kubernetes-csr.json <<EOF
  397  {
  398    "CN": "kubernetes",
  399    "key": {
  400      "algo": "rsa",
  401      "size": 2048
  402    },
  403    "names": [
  404      {
  405        "C": "US",
  406        "L": "Portland",
  407        "O": "Kubernetes",
  408        "OU": "Kubernetes The Hard Way",
  409        "ST": "Oregon"
  410      }
  411    ]
  412  }
  413  EOF
  414    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -hostname=10.20.33.109,10.20.33.240,10.20.33.129,${KUBERNETES_PUBLIC_ADDRESS},127.0.0.1,${KUBERNETES_HOSTNAMES}   -profile=kubernetes   kubernetes-csr.json | cfssljson -bare kubernetes;  }
  415  ll
  416  {
  417  cat > service-account-csr.json <<EOF
  418  {
  419    "CN": "service-accounts",
  420    "key": {
  421      "algo": "rsa",
  422      "size": 2048
  423    },
  424    "names": [
  425      {
  426        "C": "US",
  427        "L": "Portland",
  428        "O": "Kubernetes",
  429        "OU": "Kubernetes The Hard Way",
  430        "ST": "Oregon"
  431      }
  432    ]
  433  }
  434  EOF
  435    cfssl gencert   -ca=ca.pem   -ca-key=ca-key.pem   -config=ca-config.json   -profile=kubernetes   service-account-csr.json | cfssljson -bare service-account;  }
  436  ll
  437  date
  438  for instance in worker-0 worker-1 worker-2; do   lxc file push ca.pem ${instance}-key.pem ${instance}.pem ${instance}:~/; done
  439  lxc list
  440  for instance in controller-0 controller-1 controller-2; do   lxc file push ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem     service-account-key.pem service-account.pem ${instance}:~/; done
  441  lxc 
  442  lxc file
  443  lxc list
  444  touch abc
  445  lxc file push abc worker-0:~/
  446  lxc file push 
  447  lxc file push abc worker-0/~/
  448  lxc file push abc worker-0/~
  449  lxc exec worker-0 bash
  450  lxc file push abc worker-0/
  451  lxc exec worker-0 bash
  452  lxc file push abc worker-0/~
  453  lxc exec worker-0 bash
  454  lxc file push abc worker-0/
  455  lxc exec worker-0 bash
  456  ll
  457  sudo shutdown
  458  date
  459  lxc exec controller-1 bash
  460  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  461  KUBERNETES_PUBLIC_ADDRESS=10.20.33.131
  462  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  463  lxc exec controller-1 bash
  464  lxc exec worker-1 bash
  465  exit
  466  KUBERNETES_PUBLIC_ADDRESS=10.20.33.131
  467  for instance in worker-0 worker-1 worker-2; do   kubectl config set-cluster kubernetes-the-hard-way     --certificate-authority=ca.pem     --embed-certs=true     --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443     --kubeconfig=${instance}.kubeconfig;    kubectl config set-credentials system:node:${instance}     --client-certificate=${instance}.pem     --client-key=${instance}-key.pem     --embed-certs=true     --kubeconfig=${instance}.kubeconfig;    kubectl config set-context default     --cluster=kubernetes-the-hard-way     --user=system:node:${instance}     --kubeconfig=${instance}.kubeconfig;    kubectl config use-context default --kubeconfig=${instance}.kubeconfig; done
  468  ll
  469  {   kubectl config set-cluster kubernetes-the-hard-way     --certificate-authority=ca.pem     --embed-certs=true     --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443     --kubeconfig=kube-proxy.kubeconfig;    kubectl config set-credentials system:kube-proxy     --client-certificate=kube-proxy.pem     --client-key=kube-proxy-key.pem     --embed-certs=true     --kubeconfig=kube-proxy.kubeconfig;    kubectl config set-context default     --cluster=kubernetes-the-hard-way     --user=system:kube-proxy     --kubeconfig=kube-proxy.kubeconfig;    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig; }
  470  ll
  471  ll |less
  472  {   kubectl config set-cluster kubernetes-the-hard-way     --certificate-authority=ca.pem     --embed-certs=true     --server=https://127.0.0.1:6443     --kubeconfig=kube-controller-manager.kubeconfig;    kubectl config set-credentials system:kube-controller-manager     --client-certificate=kube-controller-manager.pem     --client-key=kube-controller-manager-key.pem     --embed-certs=true     --kubeconfig=kube-controller-manager.kubeconfig;    kubectl config set-context default     --cluster=kubernetes-the-hard-way     --user=system:kube-controller-manager     --kubeconfig=kube-controller-manager.kubeconfig;    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig; }
  473  ll
  474  {   kubectl config set-cluster kubernetes-the-hard-way     --certificate-authority=ca.pem     --embed-certs=true     --server=https://127.0.0.1:6443     --kubeconfig=kube-scheduler.kubeconfig;    kubectl config set-credentials system:kube-scheduler     --client-certificate=kube-scheduler.pem     --client-key=kube-scheduler-key.pem     --embed-certs=true     --kubeconfig=kube-scheduler.kubeconfig;    kubectl config set-context default     --cluster=kubernetes-the-hard-way     --user=system:kube-scheduler     --kubeconfig=kube-scheduler.kubeconfig;    kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig; }
  475  {   kubectl config set-cluster kubernetes-the-hard-way     --certificate-authority=ca.pem     --embed-certs=true     --server=https://127.0.0.1:6443     --kubeconfig=admin.kubeconfig;    kubectl config set-credentials admin     --client-certificate=admin.pem     --client-key=admin-key.pem     --embed-certs=true     --kubeconfig=admin.kubeconfig;    kubectl config set-context default     --cluster=kubernetes-the-hard-way     --user=admin     --kubeconfig=admin.kubeconfig;    kubectl config use-context default --kubeconfig=admin.kubeconfig; }
  476  for instance in worker-0 worker-1 worker-2; do   lxc file push ${instance}.kubeconfig kube-proxy.kubeconfig ${instance}/root/; done
  477  for instance in controller-0 controller-1 controller-2; do   lxc file push admin.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig ${instance}/root/; done
  478  lxc exec worker-0 ls
  479  lxc exec controller-0 ls
  480  ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)
  481  cat > encryption-config.yaml <<EOF
  482  kind: EncryptionConfig
  483  apiVersion: v1
  484  resources:
  485    - resources:
  486        - secrets
  487      providers:
  488        - aescbc:
  489            keys:
  490              - name: key1
  491                secret: ${ENCRYPTION_KEY}
  492        - identity: {}
  493  EOF
  494  for instance in controller-0 controller-1 controller-2; do   lxc file push encryption-config.yaml ${instance}/root/; done
  495  lxc exec controller-0 ls
  496  lxc exec controller-0 bash
  497  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  498  KUBERNETES_PUBLIC_ADDRESS=10.20.33.131
  499  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  500  lxc exec controller-0 bash
  501  lxc exec worker-2 bash
  502  exit
  503  lxc list
  504  lxc exec controller-2 bash
  505  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  506  KUBERNETES_PUBLIC_ADDRESS=10.20.33.131
  507  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  508  lxc exec controller-2 bash
  509  lxc exec worker-0
  510  lxc exec worker-0 bash
  511  lxc exec controller-0 bash
  512  mkdir ~/.kube/
  513  ls
  514  ls ~/.kube
  515  ll
  516  cp admin.kubeconfig ~/.kube/config
  517  ls ~/.kube
  518  vi ~/.kube/config 
  519  kubectl version
  520  kubectl get nodes
  521  exit
  522  lxc list
  523  kubectl explain KubeletConfiguration
  524  lxc exec worker-2 bash
  525  exit
  526  lxc exec worker-2 bash
  527  kubectl get nodes
  528  lxc exec worker-0 bash
  529  lxc exec worker-1 bash
  530  cd ..
  531  cd kubernetes/lxd-provisioning/
  532  vi k8s-profile-config 
  533  cd ..
  534  lxc exec worker-1 bash
  535  exit
  536  kubectl get po -A
  537  kubectl get po -A -o wide
  538  kubectl run shell2 --rm -it --image=busybox -- sh
  539  history
  540  history > k8s-hard-way-cheatsheet.txt
